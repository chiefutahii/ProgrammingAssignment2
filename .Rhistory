x <-1
x
print(x)
msg <- "hello"
msg
x <- 1:20
x
x <- c(0.5, 0.6)
x
x <- 0:6
class(x)
as.numberic(x)
as.numeric(x)
as.logical(x)
x
x <- c("a", "b", "c")
as.numeric(x)
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
x <- factor(c("yes", "yes", "no", "yes", "no")), levels = c("yes", "no")
x <- factor(c("yes", "yes", "no", "yes", "no"), levels = c("yes", "no"))
levels(x)
table(x)
install.packages("MASS")
install.packages("Matrix")
install.packages("survival")
pexp(11, 1/10, lower.tail = false)
pexp(11, 1/10, lower.tail = FALSE)
install.packages("slidify")
install.packages("devtools")
library(devtools)
library(devtools)
find_rtools()
print "I have RStudio installed on my computer."
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
mySqrt <- sqrt(z - 1)
mySqrt
myDiv <- z / mySqrt
myDiv
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
q()
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " "
)
my_name <- c(my_char, "Bryce")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1, 2, 3), c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[X > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[3, 5, 7])
c(x[3], x[5], x[7])
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector) <- c(4, 5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix()
?matrix
myMatrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData, cnames)
?colnames
colnames(myData) <- cnames
myData
q()
setwd("~/R/Coursera/R Programming")
source("submitscript.R")
q()
getwd()
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 70:72)
setwd(dir)
setwd(~)
setwd("~/")
getwd()
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
library(swirl)
swirl()
5 + 7
bye()
q()
pdata.df <- read.csv("~/specdata/001.csv")
pdata.df[3, ]
pdata.df[1:5, ]
cdata.df <- pdata.df[pdata.df$sulfate != NA & pdata.df$nitrate != NA]
cdata.df <- pdata.df[, (pdata.df$sulfate != NA & pdata.df$nitrate != NA)]
cdata.df <- pdata.df[, (pdata.df$sulfate != NA)]
cdata.df <- complete.cases(pdata.df)
pdata.df[cdata.df, ]
complete.df <- pdata.df[cdata.df, ]
nrow(complete.df)
nrow(na.omit(pdata.df))
complete <- data.frame(id, nobs)
complete <- data.frame(matrix(nrow = 1, ncol = 2))
complete
colnames(complete[1]) <- id
colnames(complete[1]) <- "id"
colnames(complete[2]) <- "nobs"
complete
colnames(complete) <- c("id", "nobs")
complete
source("complete.R")
source("complete.R")
complete("specdata", 1)
source("complete.R")
setwd("~/")
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
?cor
cor(complete.df)
correl <- data.frame(pdata.df$sulfate, pdata.df$nitrate)
cor(correl, use = "complete.obs")
cr <- cor(correl, use = "complete.obs")
summary(cr)
cor(correl$sulfate, correl$nitrate, use = "complete.obs")
cor(correl)
cor(pdata, use = "complete.obs")
cor(pdata.df, use = "complete.obs")
cor(x=pdata.df["sulfate"], y=pdata.df["nitrate"], use = "complete.obs")
q()
source("complete.R")
complete("specdata", 1:6)
mt <- complete("specdata, 1:6")[nobs >= 400]
mt <- complete("specdata", 1:6)[nobs >= 400]
mt <- complete("specdata", 1:6)[, nobs >= 400]
mt <- complete("specdata", 1:6)[nobs >= 400, ]
temp.df <- complete(
"specdata", 1:6)
names(temp.df)
mt <- temp.df[temp.df$nobs >= 400]
mt <- temp.df[nobs >= 400]
mt <- subset(temp.df, nobs >= 400)
mt
ID <- mt$id
ID
corX <- numeric()
q()
source("corr.R")
source("complete.R")
cr <- corr(
"specdata", 150)
head(cr)
source("complete.R")
cr <- corr("specdata", 150)
q()
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
pdatatemp.df <- data.frame(read.csv("~/specdata/001.csv"))
corX <- cor(x=pdatatemp.df["sulfate"], y=pdatatemp.df["nitrate"], use = "complete.obs")
cors <- numeric()
cors <- c(cors, corX)
pdatatemp.df <- data.frame(read.csv("~/specdata/002.csv"))
corX <- cor(x=pdatatemp.df["sulfate"], y=pdatatemp.df["nitrate"], use = "complete.obs")
cors <- c(cors, corX)
cors
testnobs.df <- complete("~/specdata", 1:332)
testnobs.df
mthresh.df <- subset(testnobs.df, nobs >= 150)
mthresh.df
ID <- mthresh.df$id
ID
files <- list.files()
files
source("corr.R")
source("complete.R")
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
setwd("~/specdata")
setwd("~/")
testnobs.df <- complete("specdata", 1:332)
mthresh.df <- subset(testnobs.df, nobs >= 0)
ID <- mthresh.df$id
x <- subset(testnobs.df, nobs = 0)
x
x <- subset(testnobs.df, nobs == 0)
x
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
source("submitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library(datasets)
data(iris)
colMeans(iris[, 1:4])
?iris
?colMeans
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
cylHP <- tapply(mtcars$mpg, mtcars$cyl, mean)
cylHP[1] - cylHP[3]
cylHP <- tapply(mtcars$hp, mtcars$cyl, mean)
cylHP[1] - cylHP[3]
## Matrix inversion is usually a costly computation, so these functions
## calculate the inversion and cache the result.  The function then will
## check to see if the inversion has already been calculated, and if it
## has, it will just pull the result from the cache rather than calculating
## it again.
## The makeCacheMatrix creates an invertible matrix and caches it in memory
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmtrx <- function(matrix) m <<- matrix
getmtrx <- function() m
list(set = set, get = get,
setmtrx = setmtrx,
getmtrx = getmtrx)
}
## The cacheSolve matrix checks to see if the inverse of a matrix has
## already been solved.  If it has, it pulls the cached data.  If it
## hasn't, it uses the solve() function in R to calculate the inverse.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmtrx()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmtrx(m)
m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getmtrx()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getmtrx()
source("cacheMatrix.R")
setwd("~/GitHub/ProgrammingAssignment2")
source("cacheMatrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
amatrix$getMatrix()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
amatrix$getMatrix()
source("cacheMatrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getInverse()
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getInverse()
